{"ast":null,"code":"var _jsxFileName = \"/Users/btang/Documents/CS 499 (Independent Research)/essae_qualification/src/components.js\";\nimport React from 'react';\nimport './css/components.css';\n/*******************************************************************************\nComponents\n*******************************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet updateChoice;\nexport function Shuffle(arr, n) {\n  if (n === undefined) {\n    n = arr.length;\n  } else if (n <= 0) {\n    n = arr.length;\n    console.warn('Requested samples is not greater than 0. Using full array.');\n  } else if (n > arr.length) {\n    n = arr.length;\n    console.warn('Requested more samples than there are available. Using full array.');\n  }\n\n  var nInd = n;\n  var currIndex = arr.length,\n      tempValue,\n      randIndex; // While there remain elements to shuffle...\n\n  while (0 !== currIndex) {\n    // Pick a remaining element...\n    randIndex = Math.floor(Math.random() * currIndex);\n    currIndex -= 1; // And swap it with the current element.\n\n    tempValue = arr[currIndex];\n    arr[currIndex] = arr[randIndex];\n    arr[randIndex] = tempValue;\n  }\n\n  return arr.slice(0, nInd);\n}\n_c = Shuffle;\nexport function Audio({\n  name,\n  file,\n  audioRef\n}) {\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    className: \"audio-single\",\n    controls: true,\n    ref: audioRef,\n    controlsList: \"nodownload\",\n    children: /*#__PURE__*/_jsxDEV(\"source\", {\n      src: `user-studies/${name}/audio/${file}`,\n      type: \"audio/mpeg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n_c2 = Audio;\n;\nexport function AudioRadioButton({\n  name,\n  file,\n  index,\n  choice,\n  setChoice,\n  audioRef,\n  audioEnded,\n  setAudioEnded\n}) {\n  let radioButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 20\n  }, this);\n\n  if (audioEnded) {\n    radioButton = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `check col-1 ${index === choice ? \"selected\" : \"\"}`,\n      onClick: () => setChoice(index),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inside\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"radio\",\n      id: name,\n      value: \"A\",\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this), radioButton, /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      className: \"col-3\",\n      children: /*#__PURE__*/_jsxDEV(Audio, {\n        name: name,\n        file: file,\n        audioRef: audioRef,\n        setAudioEnded: setAudioEnded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n}\n_c3 = AudioRadioButton;\n;\nexport function AudioRadioButtonGroup({\n  name,\n  files,\n  choice,\n  setChoice,\n  audioRefs,\n  audioEnded,\n  setAudioEnded\n}) {\n  updateChoice = setChoice;\n  const audioButton = files.map((item, key) => /*#__PURE__*/_jsxDEV(AudioRadioButton, {\n    name: name,\n    file: item,\n    index: key,\n    choice: choice,\n    setChoice: setChoice,\n    audioRef: audioRefs[key],\n    audioEnded: audioEnded,\n    setAudioEnded: setAudioEnded\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"AudioRadioButtonGroup\",\n    children: audioButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n}\n_c4 = AudioRadioButtonGroup;\n;\nexport function Choice({\n  index,\n  choice,\n  setChoice,\n  label\n}) {\n  console.log(choice);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"radio\",\n      id: index\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `check col-1 ${index === choice ? \"selected\" : \"\"}`,\n      onClick: () => setChoice(index),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inside\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"col-3\",\n      onClick: () => setChoice(index),\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n}\n_c5 = Choice;\n;\nexport function MultipleChoice({\n  choice,\n  setChoice,\n  labels\n}) {\n  updateChoice = setChoice;\n  const multipleChoice = labels.map((item, key) => /*#__PURE__*/_jsxDEV(Choice, {\n    index: key,\n    choice: choice,\n    setChoice: setChoice,\n    label: item\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"MultipleChoice\",\n    children: multipleChoice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n}\n_c6 = MultipleChoice;\n;\nexport { updateChoice };\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Shuffle\");\n$RefreshReg$(_c2, \"Audio\");\n$RefreshReg$(_c3, \"AudioRadioButton\");\n$RefreshReg$(_c4, \"AudioRadioButtonGroup\");\n$RefreshReg$(_c5, \"Choice\");\n$RefreshReg$(_c6, \"MultipleChoice\");","map":{"version":3,"sources":["/Users/btang/Documents/CS 499 (Independent Research)/essae_qualification/src/components.js"],"names":["React","updateChoice","Shuffle","arr","n","undefined","length","console","warn","nInd","currIndex","tempValue","randIndex","Math","floor","random","slice","Audio","name","file","audioRef","AudioRadioButton","index","choice","setChoice","audioEnded","setAudioEnded","radioButton","AudioRadioButtonGroup","files","audioRefs","audioButton","map","item","key","Choice","label","log","MultipleChoice","labels","multipleChoice"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport './css/components.css'\n\n\n/*******************************************************************************\nComponents\n*******************************************************************************/\n\nlet updateChoice;\n\nexport function Shuffle(arr, n) {\n\tif (n === undefined) {\n\t\tn = arr.length;\n\t}\n\telse if (n <= 0) {\n\t\tn = arr.length;\n\t\tconsole.warn('Requested samples is not greater than 0. Using full array.');\n\t}\n\telse if (n > arr.length) {\n\t\tn = arr.length;\n\t\tconsole.warn('Requested more samples than there are available. Using full array.');\n\t}\n\tvar nInd = n;\n\n\tvar currIndex = arr.length, tempValue, randIndex;\n\t// While there remain elements to shuffle...\n\twhile (0 !== currIndex) {\n\t\t// Pick a remaining element...\n\t\trandIndex = Math.floor(Math.random() * currIndex);\n\t\tcurrIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttempValue = arr[currIndex];\n\t\tarr[currIndex] = arr[randIndex];\n\t\tarr[randIndex] = tempValue;\n\t}\n\treturn arr.slice(0, nInd);\n}\n\nexport function Audio({ name, file, audioRef }) {\n\treturn (\n\t\t<audio className='audio-single' controls ref={audioRef} controlsList=\"nodownload\">\n\t\t\t<source src={`user-studies/${name}/audio/${file}`} type='audio/mpeg'/>\n\t\t</audio>);\n};\n\nexport function AudioRadioButton({ name, file, index, choice, setChoice, audioRef, audioEnded, setAudioEnded }) {\n\tlet radioButton = <div className=\"col-1\"></div>;\n\tif (audioEnded) {\n\t\tradioButton = (\n\t\t\t\t<div className={`check col-1 ${index === choice ? \"selected\" : \"\"}`} onClick={() => setChoice(index)}>\n\t\t\t\t\t<div className=\"inside\"></div>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n\treturn (\n\t\t<li className=\"grid\">\n\t\t\t<input type=\"radio\" id={name} value=\"A\" name={name}/>\n\t\t\t{radioButton}\n\t\t\t<label htmlFor={name} className=\"col-3\"><Audio name={name} file={file} audioRef={audioRef} setAudioEnded={setAudioEnded}/></label>\n\t\t</li>\n\t);  \n};\n\nexport function AudioRadioButtonGroup({ name, files, choice, setChoice, audioRefs, audioEnded, setAudioEnded }) {\n\tupdateChoice = setChoice;\n\tconst audioButton = files.map((item, key) => \n\t\t<AudioRadioButton \n\t\t\tname={name} \n\t\t\tfile={item} \n\t\t\tkey={key} \n\t\t\tindex={key} \n\t\t\tchoice={choice} \n\t\t\tsetChoice={setChoice}\n\t\t\taudioRef={audioRefs[key]}\n\t\t\taudioEnded={audioEnded}\n\t\t\tsetAudioEnded={setAudioEnded}\n\t\t/>\n\t);\n\treturn (\n\t\t<ul className=\"AudioRadioButtonGroup\">\n\t\t\t{audioButton}\n\t\t</ul>\n\t);\n};\n\nexport function Choice({ index, choice, setChoice, label }) {\n\tconsole.log(choice);\n\treturn (\n\t\t<li className=\"grid\">\n\t\t\t<input type=\"radio\" id={index} />\n\t\t\t<div className={`check col-1 ${index === choice ? \"selected\" : \"\"}`} onClick={() => setChoice(index)}>\n\t\t\t\t<div className=\"inside\"></div>\n\t\t\t</div>\n\t\t\t<label className=\"col-3\" onClick={() => setChoice(index)}>{label}</label>\n\t\t</li>\n\t);\n};\n\nexport function MultipleChoice({ choice, setChoice, labels }) {\n\tupdateChoice = setChoice;\n\tconst multipleChoice = labels.map((item, key) =>\n\t\t<Choice \n\t\t\tkey={key}\n\t\t\tindex={key}\n\t\t\tchoice={choice}\n\t\t\tsetChoice={setChoice}\n\t\t\tlabel={item}\n\t\t/>\n\t);\n\treturn (\n\t\t<ul className=\"MultipleChoice\">\n\t\t\t{multipleChoice}\n\t\t</ul>\n\t);\n};\n\nexport {updateChoice};\n"]},"metadata":{},"sourceType":"module"}